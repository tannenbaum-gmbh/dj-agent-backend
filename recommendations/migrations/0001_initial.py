# Generated by Django 4.2 on 2025-07-16 12:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BatchProcessingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation_type', models.CharField(max_length=50)),
                ('records_processed', models.IntegerField()),
                ('processing_time', models.FloatField()),
                ('status', models.CharField(max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('started_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'recommendations_batchprocessinglog',
            },
        ),
        migrations.CreateModel(
            name='UserInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(max_length=20)),
                ('score', models.FloatField(default=1.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recommendations_userinteraction',
            },
        ),
        migrations.CreateModel(
            name='RecommendationScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('algorithm', models.CharField(max_length=50)),
                ('computed_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recommendations_recommendationscore',
            },
        ),
        migrations.AddIndex(
            model_name='batchprocessinglog',
            index=models.Index(fields=['operation_type', 'started_at'], name='recommendat_operati_7cd751_idx'),
        ),
        migrations.AddIndex(
            model_name='batchprocessinglog',
            index=models.Index(fields=['status'], name='recommendat_status_f49241_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['user', 'created_at'], name='recommendat_user_id_a3389d_idx'),
        ),
        migrations.AddIndex(
            model_name='userinteraction',
            index=models.Index(fields=['product', 'interaction_type'], name='recommendat_product_49a5e1_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationscore',
            index=models.Index(fields=['user', 'score'], name='recommendat_user_id_444f6c_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationscore',
            index=models.Index(fields=['product', 'score'], name='recommendat_product_1834d6_idx'),
        ),
        migrations.AddIndex(
            model_name='recommendationscore',
            index=models.Index(fields=['algorithm', 'computed_at'], name='recommendat_algorit_2ee1d9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='recommendationscore',
            unique_together={('user', 'product', 'algorithm')},
        ),
    ]
